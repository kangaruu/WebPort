/* This is an Adobe Stock component for Framer created by John Canelis */

import * as React from "react";
import { Frame, PropertyControls, ControlType, Animatable } from "framer";

interface Props {
  value: string,
  people: boolean,
  orientation: string,
  illustrations: boolean,
  color: string,
  premium: boolean,
  age: string,
  width: number,
  height: number,
  mediaID: string,
  contribID: string,
  onValueChange: (query: string) => void
}

export class AdobeStock extends React.Component<Partial<Props>> {
  static defaultProps = {
    value: '',
    people: false,
    premium: false,
    illustrations: false,
    orientation: 'Standard',
    color: '',
    age: 'all',
    image: '',
    width: 300,
    height: 300,
    mediaID: '',
    contribID: ''
  }

  static propertyControls: PropertyControls<Props> = {
    value: { type: ControlType.String, title: "Search"},
    people: { type: ControlType.Boolean, title: "People"},
    premium: { type: ControlType.Boolean, title: "Premium"},
    illustrations: { type: ControlType.Boolean, title: "Illustrations"},
    orientation: {
      type: ControlType.Enum,
      title: "Orientation",
      options: ["All", "Horizontal", "Vertical", "Square"]
    },
    age: {
      type: ControlType.Enum,
      title: "Date",
      options: ["All", "1 month", "6 months", "1 year", "2 years"]
    },
    color: { type: ControlType.Color, title: "Color HEX"},
    mediaID: { type: ControlType.String, title: "ID# (Save)"},
    contribID: { type: ControlType.String, title: "Artist ID#"}
  }

  state = {
    query: this.props.value,
    image: AdobeStock.defaultProps.image
  };

  searchStock = (newQuery) => {
    // Clean up values for orientation
    let newColor = newQuery.color.substr(1);
    let newOrientation = newQuery.orientation.toLowerCase();
    let newAge = '';
    let newContribID = parseInt(newQuery.contribID);

    // Clean up values for age
    if (newQuery.age == 'All') {
      newAge = 'all';
    }

    else if (newQuery.age == '1 month') {
      newAge = '1m';
    }

    else if (newQuery.age == '6 months') {
      newAge = '6m';
    }

    else if (newQuery.age == '1 year') {
      newAge = '1y';
    }

    else if (newQuery.age == '2 years') {
      newAge = '2y';
    }

    // Configuration options for the Adobe Stock API

    if (newContribID) {
      let params = {
        'search_parameters[words]': newQuery.value ? newQuery.value : '',
        'search_parameters[limit]': 80,
        'search_parameters[creator_id]': newContribID,
        'search_parameters[filters][content_type:all]': 0,
        'search_parameters[filters][content_type:photo]': newQuery.illustrations ? 0 : 1,
        'search_parameters[filters][content_type:illustration]': newQuery.illustrations ? 1 : 0,
        'search_parameters[filters][has_releases]': newQuery.people ? 'true' : 'false',
        'search_parameters[filters][orientation]': newOrientation ? newOrientation : '',
        'search_parameters[filters][colors]': newColor ? newColor : '',
        'search_parameters[filters][age]': newAge ? newAge : 'all',
        'search_parameters[filters][premium]': newQuery.premium ? 'true' : 'false'
      }

      let query = '';
      
      for (var key in params) {
        query += encodeURIComponent(key)+'='+encodeURIComponent(params[key])+'&';
      }
  
      let theUrl = 'https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&' + query + 'result_columns%5B%5D=thumbnail_240_url&result_columns%5B%5D=details_url&result_columns%5B%5D=id&result_columns%5B%5D=thumbnail_500_url';
  
      let request = new Request(theUrl, {
        headers: new Headers({
          'X-Product': 'John Canelis',
          'x-api-key': '1dc6e0d220ff427ab0ca4e45663008e0'
        })
      });
  
      // Get an array of images from Adobe Stock
      fetch(request)
        .then(data => data.json())
        .then(data => {
          let randomNumber = Math.floor(Math.random() * data.files.length);
          this.updateImage(data.files[randomNumber].thumbnail_500_url);
        })
        .catch((err) => {
          console.error(err);
        })
    }

    else {
      let params = {
        'search_parameters[words]': newQuery.value ? newQuery.value : '',
        'search_parameters[limit]': 80,
        'search_parameters[filters][content_type:all]': 0,
        'search_parameters[filters][content_type:photo]': newQuery.illustrations ? 0 : 1,
        'search_parameters[filters][content_type:illustration]': newQuery.illustrations ? 1 : 0,
        'search_parameters[filters][has_releases]': newQuery.people ? 'true' : 'false',
        'search_parameters[filters][orientation]': newOrientation ? newOrientation : '',
        'search_parameters[filters][colors]': newColor ? newColor : '',
        'search_parameters[filters][age]': newAge ? newAge : 'all',
        'search_parameters[filters][premium]': newQuery.premium ? 'true' : 'false'
      }

      let query = '';
      
      for (var key in params) {
        query += encodeURIComponent(key)+'='+encodeURIComponent(params[key])+'&';
      }
  
      let theUrl = 'https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&' + query + 'result_columns%5B%5D=thumbnail_240_url&result_columns%5B%5D=details_url&result_columns%5B%5D=id&result_columns%5B%5D=thumbnail_500_url';
  
      let request = new Request(theUrl, {
        headers: new Headers({
          'X-Product': 'John Canelis',
          'x-api-key': '1dc6e0d220ff427ab0ca4e45663008e0'
        })
      });
  
      // Get an array of images from Adobe Stock
      fetch(request)
        .then(data => data.json())
        .then(data => {
          let randomNumber = Math.floor(Math.random() * data.files.length);
          this.updateImage(data.files[randomNumber].thumbnail_500_url);
        })
        .catch((err) => {
          console.error(err);
        })
    };
  };    

  searchStockID = (fileID) => {
    // Configuration options for the Adobe Stock API
    let params = {
      'search_parameters[words]': fileID,
      'search_parameters[limit]': 1,
      'search_parameters[filters][content_type:all]': 1,
    }

    let query = '';
    
    for (var key in params) {
      query += encodeURIComponent(key)+'='+encodeURIComponent(params[key])+'&';
    }

    let theUrl = 'https://stock.adobe.io/Rest/Media/1/Search/Files?locale=en-US&' + query + 'result_columns%5B%5D=thumbnail_240_url&result_columns%5B%5D=details_url&result_columns%5B%5D=id&result_columns%5B%5D=thumbnail_500_url';

    let request = new Request(theUrl, {
      headers: new Headers({
        'X-Product': 'John Canelis',
        'x-api-key': '1dc6e0d220ff427ab0ca4e45663008e0'
      })
    });

    // Get an array of images from Adobe Stock
    fetch(request)
      .then(data => data.json())
      .then(data => {
        this.updateImage(data.files[0].thumbnail_500_url);
      })
      .catch((err) => {
        console.error(err);
      })
  };

  updateImage = newImage => {
    this.setState({
     image: newImage
    });
  };

  componentWillMount() {
    if (this.props.mediaID) {
      this.searchStockID(this.props.mediaID);
    }
    else {
      this.searchStock(this.props);
    };
  };

  componentWillReceiveProps(props: Props) {

    if (!props.mediaID) {
      if (props.value !== this.props.value) this.searchStock(props);
      if (props.people !== this.props.people) this.searchStock(props);
      if (props.orientation !== this.props.orientation) this.searchStock(props);
      if (props.color !== this.props.color) this.searchStock(props);
      if (props.age !== this.props.age) this.searchStock(props);
      if (props.premium !== this.props.premium) this.searchStock(props);
      if (props.illustrations !== this.props.illustrations) this.searchStock(props);
      if (props.mediaID !== this.props.mediaID) this.searchStock(props);
      if (props.contribID !== this.props.contribID) this.searchStock(props);
    }

    else {
      if (props.mediaID !== this.props.mediaID) {
        this.searchStockID(props.mediaID);
      }
    };
  };

  render() {
    const width = Animatable.getNumber(this.props.width);
    const height = Animatable.getNumber(this.props.height);
    return (
      <Frame width={width} height={height} background="white">
        <div
          style={{
            width: width,
            height: height,
            backgroundImage: `url(${this.state.image})`,
            backgroundSize: "cover",
            backgroundPosition: "center",
            display: "flex",
          }}
        >
        </div>
      </Frame>
    );
  }
}
