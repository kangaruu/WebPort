import * as React from "react"
import { useMemo } from "react"
import { ControlType, Frame, addPropertyControls, MotionStyle } from "framer"
import { Icon, IconThumbnail } from "./Icon"

/* -------------------------------------------------------------------------- */
/*                                   Content                                  */
/* -------------------------------------------------------------------------- */

// Set default properties
Content.defaultProps = {
    width: 110,
    height: 110,
    name: "Marketing",
    type: "Folder",
    folderType: "Normal folder",
    fileType: "Framer",
    dropbox: false,
    sync: "‚úÖ",
    permission: "Edit",
    isSelected: false,
}

export function Content({
    width,
    height,
    name,
    type,
    folderType,
    fileType,
    dropbox,
    sync,
    permission,
    isSelected,
    onClick,
    onDoubleClick,
    thumbnail,
    showThumbnails,
}) {
    /* ---------------------------------- State --------------------------------- */

    const makeIconProps = iconFilename => {
        return {
            imageFileName: iconFilename,
        }
    }

    const getIconContent = () => {
        if (type === "file") {
            // Reference: https://stackoverflow.com/questions/47281147/switch-case-statement-for-regex-matching-in-javascript\
            switch (true) {
                case /^(mov|wmv|mp4|flv)$/.test(fileType):
                    return showThumbnails ? (
                        <IconThumbnail
                            thumbnail={thumbnail}
                            width={width}
                            thumbStyle="letterbox"
                        />
                    ) : (
                        <Icon {...makeIconProps("File Movie.png")} />
                    )
                case /^(pdf)$/.test(fileType):
                    return showThumbnails ? (
                        <IconThumbnail thumbnail={thumbnail} width={width} />
                    ) : (
                        <Icon {...makeIconProps("File PDF.png")} />
                    )
                case /^(paper)$/.test(fileType):
                    return <Icon {...makeIconProps("File Paper.png")} />
                case /^(zip|tar|rar)$/.test(fileType):
                    return <Icon {...makeIconProps("File Zip.png")} />
                case /^(text|txt|rtf)$/.test(fileType):
                    return <Icon {...makeIconProps("File Text.png")} />
                case /^(xls)$/.test(fileType):
                    return <Icon {...makeIconProps("File Excel.png")} />
                case /^(doc|docx)$/.test(fileType):
                    return <Icon {...makeIconProps("File Word.png")} />
                case /^(numbers)$/.test(fileType):
                    return <Icon {...makeIconProps("File Numbers.png")} />
                case /^(pages)$/.test(fileType):
                    return <Icon {...makeIconProps("File Pages.png")} />
                case /^(ppt|pptx)$/.test(fileType):
                    return <Icon {...makeIconProps("File Powerpoint.png")} />
                case /^(keynote)$/.test(fileType):
                    return <Icon {...makeIconProps("File Keynote.png")} />
                case /^(framerx|framer|framerfx)$/.test(fileType):
                    return <Icon {...makeIconProps("File Framer.png")} />
                case /^(sketch)$/.test(fileType):
                    return <Icon {...makeIconProps("File Sketch.png")} />
                case /^(psd)$/.test(fileType):
                    return <Icon {...makeIconProps("File Photoshop.png")} />
                case /^(ai)$/.test(fileType):
                    return <Icon {...makeIconProps("File Illustrator.png")} />
                case /^(ae)$/.test(fileType):
                    return <Icon {...makeIconProps("File After Effects.png")} />
                case /^(dwg)$/.test(fileType):
                    return <Icon {...makeIconProps("File Autocad.png")} />
                case /^(ics|ical)$/.test(fileType):
                    return <Icon {...makeIconProps("File Calendar.png")} />
                case /^(otf|ttf|ttc)$/.test(fileType):
                    return <Icon {...makeIconProps("File Font.png")} />
                case /^(gif)$/.test(fileType):
                    return showThumbnails ? (
                        <IconThumbnail thumbnail={thumbnail} width={width} />
                    ) : (
                        <Icon {...makeIconProps("File GIF.png")} />
                    )
                case /^(jpeg|jpg)$/.test(fileType):
                    return showThumbnails ? (
                        <IconThumbnail thumbnail={thumbnail} width={width} />
                    ) : (
                        <Icon {...makeIconProps("File JPEG.png")} />
                    )
                case /^(png)$/.test(fileType):
                    return showThumbnails ? (
                        <IconThumbnail thumbnail={thumbnail} width={width} />
                    ) : (
                        <Icon {...makeIconProps("File PNG.png")} />
                    )
                case /^(lnk)$/.test(fileType):
                    return <Icon {...makeIconProps("File Link.png")} />
                default:
                    return <Icon {...makeIconProps("File Blank.png")} />
            }
        } else if (type === "folder") {
            switch (folderType) {
                case "Shared folder":
                    return <Icon {...makeIconProps("Folder Shared.png")} />
                case "Team folder":
                    return <Icon {...makeIconProps("Folder Team.png")} />
                case "Member folder":
                    return <Icon {...makeIconProps("Folder Member.png")} />
                case "Restricted folder":
                    return <Icon {...makeIconProps("Folder Restricted.png")} />
                default:
                    return <Icon {...makeIconProps("Folder.png")} />
            }
        }
    }

    const getIconRight = () => {
        if (dropbox) {
            switch (sync) {
                case "‚úÖ":
                    return <Icon {...makeIconProps("Sync Check.png")} />
                case "‚ôªÔ∏è":
                    return <Icon {...makeIconProps("Sync Partial.png")} />
                case "‚òÅÔ∏è":
                    return <Icon {...makeIconProps("Sync Cloud.png")} />
                case "üîÑ":
                    return <Icon {...makeIconProps("Sync Syncing.png")} />
                case "‚ùå":
                    return <Icon {...makeIconProps("Sync Error.png")} />
                default:
                    return null
            }
        } else return null
    }

    const getIconLeft = () => {
        if (dropbox) {
            switch (permission) {
                case "View":
                    return <Icon {...makeIconProps("Permission Locked.png")} />
                case "None":
                    return <Icon {...makeIconProps("Permission Private.png")} />
                case "Edit":
                    return null
                default:
                    return null
            }
        } else return null
    }

    const iconContent = useMemo(() => {
        return getIconContent()
    }, [
        type,
        fileType,
        folderType,
        thumbnail,
        showThumbnails,
        isSelected,
        width,
        height,
    ])
    // Set status indicators
    const iconRight = useMemo(() => {
        return getIconRight()
    }, [dropbox, sync, width, height])

    const iconLeft = useMemo(() => {
        return getIconLeft()
    }, [dropbox, permission, width, height])

    /* --------------------------------- Methods -------------------------------- */

    const handleClick = React.useCallback(() => {
        onClick && onClick(name)
    }, [])

    const handleDoubleClick = () => {
        onDoubleClick && onDoubleClick(name, type)
    }

    /* --------------------------------- Render --------------------------------- */
    return (
        <Frame
            width={width}
            height={height}
            background="transparent"
            onClick={handleClick}
            onDoubleClick={handleDoubleClick}
        >
            <Frame style={iconContainerStyle()}>
                <Frame
                    width={74}
                    height={74}
                    left={4}
                    scale={width / 110}
                    background="none"
                >
                    {iconContent}
                    {iconRight}
                    {iconLeft}
                    <div style={iconBGStyle(isSelected)}></div>
                </Frame>
            </Frame>
            <Frame style={labelContainerStyle()}>
                <span style={labelStyle(isSelected)}>{name}</span>
            </Frame>
        </Frame>
    )
}

// Items shown in property panel
addPropertyControls(Content, {
    name: { type: ControlType.String, title: "Name" },
    type: {
        type: ControlType.SegmentedEnum,
        title: "Type",
        options: ["folder", "file"],
    },
    folderType: {
        type: ControlType.Enum,
        title: "Folder Type",
        options: [
            "Normal folder",
            "Shared folder",
            "Team folder",
            "Member folder",
            "Restricted folder",
        ],
        hidden(props) {
            return props.type !== "folder"
        },
    },
    fileType: {
        type: ControlType.Enum,
        title: "File Type",
        options: [
            "framer",
            "sketch",
            "mov",
            "pdf",
            "zip",
            "text",
            "xls",
            "doc",
            "ppt",
            "keynote",
            "psd",
            "ai",
            "ae",
        ],
        hidden(props) {
            return props.type !== "file"
        },
    },
    dropbox: {
        type: ControlType.Boolean,
        title: "Dropbox",
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    sync: {
        type: ControlType.SegmentedEnum,
        title: "Sync",
        options: ["‚úÖ", "‚ôªÔ∏è", "‚òÅÔ∏è", "üîÑ", "‚ùå"],
        hidden(props) {
            return props.dropbox === false
        },
    },
    permission: {
        type: ControlType.SegmentedEnum,
        title: "Access",
        options: ["Edit", "View", "None"],
        hidden(props) {
            return props.dropbox === false
        },
    },
    isSelected: {
        type: ControlType.Boolean,
        title: "Selected",
        enabledTitle: "Yes",
        disabledTitle: "No",
    },
})

const iconBGStyle = (isSelected): React.CSSProperties => {
    return {
        height: "100%",
        width: "100%",
        marginLeft: "-6%",
        marginTop: "-6%",
        backgroundColor: isSelected ? "rgba(0,0,0,0.12)" : "",
        borderRadius: 4,
    }
}

const labelContainerStyle = (): MotionStyle => {
    return {
        position: "absolute",
        top: "calc(70%)",
        left: 0,
        width: "100%",
        textAlign: "center",
        background: "transparent",
    }
}

/* --------------------------------- Styling -------------------------------- */

const iconContainerStyle = (): MotionStyle => {
    return {
        position: "absolute",
        top: "calc(35% - 37px)",
        left: "calc(50% - 37px)",
        background: "transparent",
    }
}

//FIXME: Line clamping is weird right now. It's only clamping the right side instead of the middle, therefore hidding the file extension.
const labelStyle = (isSelected): React.CSSProperties => {
    return {
        padding: 3,
        borderRadius: 3,
        background: isSelected ? "#0269D9" : "",
        color: isSelected ? "white" : "black",
        fontSize: 12,
        fontFamily: "-apple-system, system-ui, BlinkMacSystemFont, Segoe UI",
        fontWeight: 500,
        lineHeight: "16px",
        textOverflow: "ellipsis",
        whiteSpace: "pre-line",
        WebkitLineClamp: 2,
        WebkitBoxOrient: "vertical",
        display: "-webkit-box",
        overflow: "hidden",
        letterSpacing: -0.15,
    }
}
