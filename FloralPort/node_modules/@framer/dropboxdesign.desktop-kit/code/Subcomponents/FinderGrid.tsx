import * as React from "react"
import { useState, useEffect, useLayoutEffect } from "react"
import {
    Frame,
    addPropertyControls,
    ControlType,
    PropertyControls,
    MotionStyle,
} from "framer"
import { Content } from "./Content"
import { Spinner } from "./Spinner"
import { Helpers_FinderGridInstructions as FinderGridInstructions } from "../canvas"
import { useDropboxAPI } from "../Utils/fetch"

/* -------------------------------------------------------------------------- */
/*                                 FinderGrid                                 */
/* -------------------------------------------------------------------------- */

export function FinderGrid(props) {
    const {
        tileSize,
        source,
        accessToken,
        showThumbnails,
        genericJSON,
        isCacheOn,
        path,
        setFinderTitle,
        setItemCount,
    } = props

    const fakeJSON = [
        { type: "folder", name: "Add" },
        { type: "folder", name: "your" },
        { type: "folder", name: "content" },
    ]

    /* ---------------------------------- State --------------------------------- */

    // Display content based on props and what's in contentList
    const [contentList, setContentList] = useState([])
    const [currentPath, setCurrentPath] = useState(path === "/" ? "" : path)
    const { files: dropboxFiles, isDataLoading, pathMetaData } = useDropboxAPI({
        accessTokenURL: accessToken,
        currentPath,
        showThumbnails,
        isCacheOn,
    })
    const [selectedItem, setSelectedItem] = useState("")

    const genericFiles =
        genericJSON.length > 0 ? tokenizeJSON(genericJSON) : fakeJSON

    // Switch the display of static vs dynamic content.
    useLayoutEffect(() => {
        setContentList(
            source === "Generic" && !isDataLoading ? genericFiles : dropboxFiles
        )
    }, [genericJSON, source, dropboxFiles, accessToken, currentPath])

    useLayoutEffect(() => {
        setItemCount && setItemCount(contentList.length)
    })

    useLayoutEffect(() => {
        setFinderTitle &&
            setFinderTitle(
                pathMetaData !== null
                    ? pathMetaData.path_display.replace("/", "")
                    : null
            )
    })

    //Handle the case where users input "/" in the Property Controls
    useEffect(() => {
        setCurrentPath(path === "/" ? "" : path)
    }, [path])

    /* --------------------------------- Methods --------------------------------- */

    const handleContentItemClick = React.useCallback(targetName => {
        setSelectedItem(targetName)
    }, [])

    const handleContentItemDoubleClick = (targetName, targetType) => {
        if (targetType === "folder" && source === "Dropbox" && !isDataLoading) {
            let newPath = currentPath + "/" + targetName
            setContentList([]) // Flush the view before changing paths
            setCurrentPath(newPath)
        }
    }

    const handleBackButtonClick = React.useCallback(() => {
        if (currentPath !== "") {
            let to = currentPath.lastIndexOf("/")
            to = to == -1 ? currentPath.length : to
            let newPath = currentPath.substring(0, to)
            setContentList([]) // Flush the view before changing paths
            setCurrentPath(newPath)
        }
    }, [contentList])

    /* --------------------------------- Render --------------------------------- */

    return (
        <Frame size="100%" background="transparent">
            <Frame onClick={handleBackButtonClick} style={backButtonStyle()} />
            {source === "Dropbox" && !accessToken ? (
                <FinderGridInstructions z={10} width={"100%"} height={"100%"} />
            ) : (
                <div style={gridStyle()}>
                    {isDataLoading && source === "Dropbox" ? (
                        <Spinner />
                    ) : (
                        contentList.map(item => {
                            return (
                                <Frame
                                    key={item.name}
                                    style={itemStyle(tileSize)}
                                >
                                    <Content
                                        width={tileSize}
                                        height={tileSize}
                                        name={item.name}
                                        type={
                                            item.type ? item.type : item[".tag"]
                                        }
                                        folderType={
                                            item.shared_folder_id ||
                                            item.folderType
                                                ? item.shared_folder_id
                                                    ? "Shared folder"
                                                    : item.folderType
                                                : "Normal folder"
                                        }
                                        fileType={item.name.substr(
                                            item.name.lastIndexOf(".") + 1
                                        )}
                                        thumbnail={
                                            item.thumbnail
                                                ? item.thumbnail
                                                : null
                                        }
                                        dropbox={true}
                                        sync="✅"
                                        permission="Edit"
                                        isSelected={selectedItem === item.name}
                                        onClick={handleContentItemClick}
                                        onDoubleClick={
                                            handleContentItemDoubleClick
                                        }
                                        showThumbnails={showThumbnails}
                                    />
                                </Frame>
                            )
                        })
                    )}
                </div>
            )}
        </Frame>
    )
}

FinderGrid.defaultProps = {
    width: 500,
    height: 400,
    source: "Generic",
    path: "",
    tileSize: 110,
    getToken:
        "https://www.dropbox.com/oauth2/authorize?client_id=mkgjyxwdgz9cjff&response_type=token&redirect_uri=http://127.0.0.1:4567",
    accessToken: "",
    isCacheOn: false,
    showThumbnails: false,
    genericJSON: [
        "Shared folder: All hands",
        "folder: Design",
        "folder: Events",
        "folder: Marketing",
        "Member folder: My stuff",
        "folder: Sales",
        "file: Homepage.sketch",
        "file: Specs.paper",
        "file: Prototype.framerx",
    ],
}

function tokenizeJSON(arr) {
    let parsedJSON = arr.map(item => {
        const type = item.substring(0, item.indexOf(":"))
        const name = item
            .substring(item.indexOf(":"), item.length)
            .replace(": ", "")
        return {
            type: type.includes("folder") ? "folder" : "file",
            name,
            folderType: type.includes(" folder") ? type : null,
        }
    })
    return parsedJSON
}

/* ---------------------------- Property Controls --------------------------- */

const FinderGridPropertyControls: PropertyControls = {
    source: {
        type: ControlType.SegmentedEnum,
        title: "Source",
        options: ["Generic", "Dropbox"],
    },
    genericJSON: {
        type: ControlType.Array,
        title: 'Content → ("type: name")',
        propertyControl: {
            type: ControlType.String,
            placeholder: `file: File Name.ext`,
        },
        hidden(props) {
            return props.source !== "Generic"
        },
    },
    getToken: {
        type: ControlType.String,
        title: "Get token →",
        placeholder: "Why did you delete me",
        hidden(props) {
            return props.source !== "Dropbox"
        },
    },
    accessToken: {
        type: ControlType.String,
        title: "Put it here →",
        placeholder: "Paste token here...",
        hidden(props) {
            return props.source !== "Dropbox"
        },
    },
    path: {
        type: ControlType.String,
        title: "Start path",
        placeholder: "/",
        hidden(props) {
            return props.source !== "Dropbox"
        },
    },
    showThumbnails: {
        type: ControlType.Boolean,
        title: "Thumbnails",
        enabledTitle: "On",
        disabledTitle: "Off",
        hidden(props) {
            return props.source !== "Dropbox"
        },
    },
    isCacheOn: {
        type: ControlType.Boolean,
        title: "Caching",
        enabledTitle: "On",
        disabledTitle: "Off",
        hidden(props) {
            return props.source !== "Dropbox"
        },
    },
    tileSize: {
        type: ControlType.Number,
        title: "Tile size",
        max: 300,
        min: 50,
        step: 10,
    },
}

addPropertyControls(FinderGrid, FinderGridPropertyControls)

// This is an invisible hitarea that is positioned at the exact location of the back button in Finder
const backButtonStyle = (): MotionStyle => {
    return {
        height: "25px",
        width: "25px",
        position: "absolute",
        top: "-32px",
        left: "-192px",
        fontSize: 0,
        background: "transparent",
    }
}

const gridStyle = (): React.CSSProperties => {
    return {
        height: "100%",
        width: "100%",
        background: "white",
        overflowY: "scroll",
        overflowX: "hidden",
        padding: "8px",
    }
}

const itemStyle = (tileSize): MotionStyle => {
    return {
        position: "relative",
        display: "inline-block",
        width: `${tileSize}px`,
        height: `${tileSize}px`,
        background: "transparent",
    }
}
