import * as React from "react"
import { useState, useLayoutEffect } from "react"
import {
    ControlType,
    addPropertyControls,
    Frame,
    Stack,
    MotionStyle,
    PropertyControls,
    useMotionValue,
    useTransform,
} from "framer"
import { FinderGrid } from "./Subcomponents/FinderGrid"
import {
    Subcomponents_Finder_Toolbar,
    Subcomponents_Finder_Sidebar,
    Subcomponents_Finder_StatusBar,
} from "./canvas"
import { Icon } from "./Subcomponents/Icon"

/* -------------------------------------------------------------------------- */
/*                                 Finder                                 */
/* -------------------------------------------------------------------------- */

export function Finder(props) {
    const { tileSize, dropboxName, showStatusBar } = props

    /* ---------------------------------- State --------------------------------- */

    const [finderTileSize, setFinderTileSize] = useState(tileSize)
    const [finderTitle, setFinderTitle] = useState(dropboxName)
    const [itemCount, setItemCount] = useState(0)

    useLayoutEffect(() => {
        setFinderTileSize(tileSize)
    }, [tileSize])

    /* --------------------------------- Render --------------------------------- */
    return (
        <Frame size={"100%"} background={"transparent"} style={finderStyle}>
            <Stack size={"100%"} distribution={"space-evenly"}>
                <Subcomponents_Finder_Toolbar
                    width={"1fr"}
                    height={56}
                    Title={finderTitle !== null ? finderTitle : dropboxName}
                />
                <Stack
                    direction={"horizontal"}
                    width={"1fr"}
                    height={"1fr"}
                    gap={0}
                >
                    <FinderSidebar
                        width={200}
                        height={"1fr"}
                        dropboxName={dropboxName}
                    />
                    <Frame width={"1fr"} height={"1fr"}>
                        <FinderGrid
                            size={"100%"}
                            setFinderTitle={setFinderTitle}
                            setItemCount={setItemCount}
                            {...props}
                            tileSize={finderTileSize}
                        />
                    </Frame>
                </Stack>
                {showStatusBar ? (
                    <Frame width={"1fr"} height={24}>
                        <Subcomponents_Finder_StatusBar
                            width={"100%"}
                            height={"100%"}
                            Status={`${itemCount} items`}
                        />
                        <FinderSlider
                            right={15}
                            width={78}
                            center={"y"}
                            min={
                                //@ts-ignore
                                FinderGrid.propertyControls.tileSize.min
                            }
                            max={
                                //@ts-ignore
                                FinderGrid.propertyControls.tileSize.max
                            }
                            finderTileSize={finderTileSize}
                            setFinderTileSize={setFinderTileSize}
                        />
                    </Frame>
                ) : null}
            </Stack>
        </Frame>
    )
}

const finderStyle: MotionStyle = {
    overflow: "hidden",
    backgroundColor: "rgba(232, 232, 232, 0.85)",
    borderRadius: 5,
    WebkitBackdropFilter: "blur(20px)",
    backdropFilter: "blur(20px)",
    boxShadow:
        "0px 10px 25px 0px rgba(0, 0, 0, 0.5), 0px 0px 0px 1px hsla(0, 0%, 0%, 0.2)",
}

/* ---------------------------- Property Controls --------------------------- */

Finder.defaultProps = {
    ...FinderGrid.defaultProps,
    name: "Finder",
    width: 720,
    height: 480,
    dropboxName: "Acme Dropbox",
}
const FinderPropertyControls: PropertyControls = {
    //@ts-ignore
    ...FinderGrid.propertyControls, // Re-use the same property controls as FinderGrid
    dropboxName: {
        type: ControlType.String,
        title: "Dropbox name",
        placeholder: "Acme Dropbox",
    },
    showStatusBar: {
        type: ControlType.Boolean,
        title: "Status Bar",
        enabledTitle: "On",
        disabledTitle: "Off",
    },
}
addPropertyControls(Finder, FinderPropertyControls)

/* -------------------------------------------------------------------------- */
/*                                FinderSidebar                               */
/* -------------------------------------------------------------------------- */

function FinderSidebar({ width, height, dropboxName }) {
    const titleRow = () => (
        <Frame
            width={"100%"}
            height={24}
            background="transparent"
            style={{ padding: "9px 9px" }}
        >
            <p
                style={{
                    height: 13,
                    width: "100%",
                    fontFamily: `".SFNSText-Semibold", "SFProText-Semibold", "SFUIText-Semibold", ".SFUIText-Semibold", "SF Pro Text", "-apple-system", "BlinkMacSystemFont", sans-serif`,
                    color: "#707274",
                    fontSize: 11,
                    letterSpacing: -0.1,
                    lineHeight: 1.2,
                    fontWeight: 599,
                    margin: 0,
                    textAlign: "left",
                }}
            >
                Favorites
            </p>
        </Frame>
    )

    const dropboxLogo = () => {
        return (
            <svg xmlns="http://www.w3.org/2000/svg" width="19" height="16">
                <path
                    d="M 14.149 5.997 L 18.824 8.984 L 14.116 11.994 L 9.412 8.987 L 4.708 11.994 L 0 8.984 L 4.675 5.997 L 0 3.009 L 4.708 0 L 9.412 3.007 L 14.116 0 L 18.824 3.009 Z M 14.083 5.997 L 9.412 3.011 L 4.741 5.997 L 9.412 8.983 Z M 4.738 12.99 L 9.446 9.982 L 14.153 12.99 L 9.446 16 Z"
                    fill="hsla(0, 0%, 27%, 0.83)"
                ></path>
            </svg>
        )
    }

    const row = ({ appName, isSelected = false, isDropbox = false }) => {
        return (
            <Stack
                distribution="start"
                direction="horizontal"
                width={"1fr"}
                height={24}
                background={isSelected ? "rgba(0, 0, 0, 0.15)" : "transparent"}
                padding={10}
                gap={14}
            >
                {isDropbox ? (
                    <Frame
                        height={18}
                        width={17}
                        top={1}
                        left={8}
                        background="transparent"
                    >
                        {dropboxLogo()}
                    </Frame>
                ) : (
                    <Icon
                        imageFileName={`Sidebar ${appName}.png`}
                        width={18}
                        height={17}
                        left={8}
                        top={0}
                    />
                )}
                <Frame height={15} width={"1fr"} background="transparent">
                    <p
                        style={{
                            width: "100%",
                            height: 15,
                            fontFamily: `".SFNSText-Medium", "SFProText-Medium", "SFUIText-Medium", ".SFUIText-Medium", "SF Pro Text", "-apple-system", "BlinkMacSystemFont", sans-serif`,
                            color: "#1b1b1b",
                            fontSize: 13,
                            letterSpacing: -0.1,
                            lineHeight: 1.2,
                            fontWeight: 499,
                            margin: 0,
                        }}
                    >
                        {appName}
                    </p>
                </Frame>
            </Stack>
        )
    }

    return (
        <Stack
            left={0}
            top={0}
            width={width}
            height={height}
            distribution="start"
            gap={2}
            padding={0}
            background="rgba(255, 255, 255, 0.9)"
            style={{
                borderStyle: "solid",
                borderColor: "rgba(0, 0, 0, 0.25)",
                borderTopWidth: 0,
                borderBottomWidth: 0,
                borderLeftWidth: 0,
                borderRightWidth: 0.5,
            }}
        >
            {titleRow()}
            {row({ appName: "Desktop" })}
            {row({ appName: dropboxName, isSelected: true, isDropbox: true })}
            {row({ appName: "Dropbox (Personal)", isDropbox: true })}
            {row({ appName: "AirDrop" })}
            {row({ appName: "iCloud Drive" })}
            {row({ appName: "Applications" })}
            {row({ appName: "Downloads" })}
        </Stack>
    )
}

/* -------------------------------------------------------------------------- */
/*                                FinderSlider                                */
/* -------------------------------------------------------------------------- */

function FinderSlider({
    setFinderTileSize,
    finderTileSize,
    min,
    max,
    ...rest
}) {
    return (
        <Slider
            {...rest}
            value={finderTileSize}
            min={min}
            max={max}
            onChange={newValue => setFinderTileSize(newValue)}
        />
    )
}

function Slider(props) {
    const { width, min = 0, max = 1, value = 0, onChange, ...rest } = props
    const ratio = width / max
    const position = useMotionValue(value * ratio)
    const newValue = useTransform(position, [0, width], [min, max])
    const knobSize = 12
    const dragProps = {
        drag: true,
        dragMomentum: false,
        dragElastic: false,
        dragConstraints: { left: -knobSize / 2, right: width - knobSize / 2 },
        onDrag: () => {
            onChange && onChange(newValue.get())
        },
    }

    return (
        <Frame {...rest} height={12} background="transparent" width={width}>
            <Frame
                name="Track"
                backgroundColor={"#A9A9A9"}
                height={4}
                width="100%"
                radius={10}
                center="y"
            >
                <Frame
                    name="Progress"
                    backgroundColor={"#3A88FD"}
                    height="100%"
                    width={position}
                    radius={10}
                    center="y"
                />
                <Frame
                    {...dragProps}
                    drag={"x"}
                    name="Knob"
                    backgroundColor={"white"}
                    radius={10}
                    center="y"
                    x={position}
                    size={knobSize}
                    shadow={"0px 0px 1px 1px rgba(0, 0, 0, 0.2)"}
                />
            </Frame>
        </Frame>
    )
}
